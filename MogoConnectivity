import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.Document;
import java.util.Arrays;

public class MongoDBCrudExample {
    public static void main(String[] args) {
        // Connect to MongoDB
        MongoClientURI uri = new MongoClientURI("mongodb://localhost:27017");
        MongoClient mongoClient = new MongoClient(uri);
        
        // Create or select the database
        MongoDatabase database = mongoClient.getDatabase("companyDB");
        
        // Create or select the collection
        MongoCollection<Document> employeeCollection = database.getCollection("employees");

        // Insert initial documents
        insertInitialData(employeeCollection);

        // Display all records
        System.out.println("Initial records:");
        displayAllRecords(employeeCollection);

        // Add a new employee
        addEmployee(employeeCollection, "John Doe", "HR", 40000);
        
        // Update an employee's salary
        updateEmployeeSalary(employeeCollection, "John Doe", 45000);
        
        // Delete an employee
        deleteEmployee(employeeCollection, "Alice");

        // Display all records after operations
        System.out.println("Records after add, update, and delete operations:");
        displayAllRecords(employeeCollection);

        // Close MongoDB connection
        mongoClient.close();
    }

    // Insert initial data into the collection
    private static void insertInitialData(MongoCollection<Document> collection) {
        collection.insertMany(Arrays.asList(
                new Document("name", "Alice").append("department", "IT").append("salary", 50000),
                new Document("name", "Bob").append("department", "Finance").append("salary", 60000),
                new Document("name", "Charlie").append("department", "IT").append("salary", 55000),
                new Document("name", "David").append("department", "HR").append("salary", 48000),
                new Document("name", "Eve").append("department", "Finance").append("salary", 62000)
        ));
    }

    // Display all records in the collection
    private static void displayAllRecords(MongoCollection<Document> collection) {
        for (Document doc : collection.find()) {
            System.out.println(doc.toJson());
        }
    }

    // Add a new employee to the collection
    private static void addEmployee(MongoCollection<Document> collection, String name, String department, int salary) {
        Document newEmployee = new Document("name", name)
                .append("department", department)
                .append("salary", salary);
        collection.insertOne(newEmployee);
        System.out.println("Added new employee: " + name);
    }

    // Update an employee's salary
    private static void updateEmployeeSalary(MongoCollection<Document> collection, String name, int newSalary) {
        collection.updateOne(Filters.eq("name", name), Updates.set("salary", newSalary));
        System.out.println("Updated salary for employee: " + name);
    }

    // Delete an employee from the collection
    private static void deleteEmployee(MongoCollection<Document> collection, String name) {
        collection.deleteOne(Filters.eq("name", name));
        System.out.println("Deleted employee: " + name);
    }
}



1. Set Up Eclipse Project
Open Eclipse and create a new Java Project.
Name your project, for example, MongoDBCrudExample.
2. Add MongoDB Java Driver Dependency
Download the MongoDB Java Driver JAR from MongoDB's official site.
Right-click the project > Build Path > Configure Build Path > Libraries > Add External JARs… and select the downloaded JAR file.
3. Create a Java Class for CRUD Operations
Right-click on the src folder > New > Class.
Name it MongoDBCrudExample, and check the option to include the main method.
4. Write the Java Code
Copy and paste the Java code from the previous response into the MongoDBCrudExample class in Eclipse.
5. Run the Program
Right-click on the class file > Run As > Java Application.
The program should run and will connect to MongoDB, create the companyDB database, and the employees collection if they don’t already exist.
